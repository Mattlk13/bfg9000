# -*- python -*-

# In order to use the new-style find_files() API, we need to declare that our
# script requires bfg9000 v0.6 or greater. Otherwise, we'll get the old API.

bfg9000_required_version('>=0.6.0.dev0')

# For projects with many files (or lazy developers!), it can be bothersome to
# have to list every source file explicitly. In cases like this, the
# find_files() function comes in handy. It takes a glob pattern and searches
# for files matching it; you can also pass an "extra" glob (which looks only at
# the basenames of each file) to match files that should be distributed in a
# source package, but *not* returned from find_files():

hello_src = find_files('src/hello/*.cpp', extra='*.hpp')
hello = executable('hello', files=hello_src)

# You can also search recursively into subdirectories with the `**` pattern:

goodbye_src = find_files('src/goodbye/**/*.cpp', extra='*.hpp')
goodbye = executable('goodbye', files=goodbye_src)

# When using find_files(), bfg9000 records the result of the search and, before
# each build, will check to ensure that the result hasn't changed. If it has,
# the build files will be regenerated automatically. Naturally, this can slow
# down the build process for extremely large projects. To disable this, just
# pass `cache=False` to find_files().
