# -*- python -*-

# Sometimes, you want to be able to perform a build step that bfg9000 doesn't
# provide a built-in rule for. In this case, you can use the build_step()
# function, which takes an arbitrary command and produces a file:

generator = source_file('generator.py')

hello = build_step('hello.cpp', cmd=[
    generator, 'hello', 'hello.cpp'
], description='generator => hello.cpp')

executable('hello', files=[hello], description='link => hello :)')

# Some build steps produce *multiple* files; you can specify this by passing a
# list of names of the files to produce. In these cases, it's often especially
# helpful to use the `build_step.output` placeholder to avoid repetition:

goodbye_hdr, goodbye_src = build_step(['goodbye.hpp', 'goodbye.cpp'], cmd=[
    generator, 'goodbye', build_step.output
])

executable('goodbye', files=['main.cpp', goodbye_src], includes=[goodbye_hdr])
