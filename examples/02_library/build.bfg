# -*- mode: python; mode: bfg9000 -*-

# This build.bfg shows how to build a library and use it in an executable.
# First, create the library and give it a name; like executables, this name
# will be transformed to match the conventions for your platform (e.g.
# `liblibrary.so`). The return value of library() is a reference to the built
# library, which can be used elsewhere in the build file.
#
# By default, this creates a shared library; however, when invoking bfg9000,
# you can pass `--enable-shared`/`--disable-shared` to control this, as well as
# `--enable-static`/`--disable-static` to control creation of static libraries.

lib = library('library', files=['library.cpp'])

# Next, use the `lib` variable to link the newly-created library to an
# executable that requires it.

prog = executable('program', files=['program.cpp'], libs=[lib])

# Finally, we can specify the default targets for this build script. These will
# be built when running `make` or `make all`. This isn't strictly necessary in
# this case, since `prog` already depends on `lib` and will ensure it's built
# first. However, for more complex build scripts, this can be useful.

default(prog, lib)
