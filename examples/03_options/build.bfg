# -*- mode: python; mode: bfg9000 -*-

# Many projects need to set compiler options for their code to build. bfg9000
# supports setting options at the language level and for each target. To set
# global options for a particular language, use the global_options() function:

global_options(['-DPRE="hello"'], lang='c++')

# Occasionally, a project may also need to set some link-time options. This can
# be done with global_link_options(). Note in addition that options can be
# specified as a list as above, or as a single string containing several
# options:

if env.target_platform.name == 'linux':
    global_link_options('-s')

# Targets may also have their own options. For linking steps (e.g.
# executables), options can be set for compilation or linking, using
# `compile_options` and `link_options`, respectively. Options can also be
# defined as *semantic options*, which automatically translate to the
# appropriate string for the compiler/linker being used:

executable('program', compile_options=[opts.define('POST', '"world!"')],
           files=['program.cpp'])

# Finally, individual builds can set various options using the standard POSIX-
# style environment variables, such as CXXFLAGS, CPPFLAGS, and LDFLAGS.
